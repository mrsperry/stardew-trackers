"use strict";class Main{static async initialize(t){State.load();const e=await $.getJSON("src/data/"+t+".json");switch(t){case"fish":new FishTracker(e);break;case"crops":new CropTracker(e)}}}class State{static load(){const t=localStorage.getItem("stardew-data");null!=t&&(State.data=JSON.parse(t))}static save(){localStorage.setItem("stardew-data",JSON.stringify(State.data,null,4))}static reset(t){null!=State.data[t]&&(State.data[t]={},State.save())}static setValue(t,e,a){null==State.data[t]&&(State.data[t]={}),State.data[t][e]=a,State.save()}static getValue(t,e){return null==State.data[t]?null:null==e?State.data[t]:State.data[t][e]}}State.data={};class Utils{static capitalize(t){return t.substring(0,1).toUpperCase()+t.substring(1,t.length)}static formatID(t){return t.split("-").map(t=>Utils.capitalize(t)).join(" ")}}class Tracker{constructor(t){this.namespace=t,$("#"+t).hide(),$("#reset-tracker").on("click",()=>{State.reset(this.namespace);for(const t of $("tr.checked"))$(t).removeClass("checked")})}addGraphic(t,e,a){const s=$("<td>").appendTo(t),r=$("<div>").addClass("info-holder centered").appendTo(s);if(null!=e){"string"==typeof e&&(e=[e]);for(const t of e){const e=$("<figure>").addClass("tracker-graphic").appendTo(r),s=a||this.getGraphicTooltip(t);$("<img>").attr("src","src/assets/misc/"+t+".png").attr("alt",s).appendTo(e),$("<figcaption>").text(s).appendTo(e)}}}getGraphicTooltip(t){switch(t){case"bundle":return"Bundle requirement";case"gift":return"Loved gift";case"fish-recipe":case"crop-recipe":return"Cooking ingredient";case"brewing":return"Brewing ingredient";case"crafting":return"Crafting ingredient";case"quest":return"Quest item";case"polyculture":return"Used in polyculture";case"trellis":return"Uses a trellis"}return"No tooltip found"}addGraphicInformation(t,e,a){const s=$("<td>").appendTo(t);if(null!=e){"string"==typeof e&&(e=[e]);for(const t of e){const e=$("<div>").addClass("info-holder").appendTo(s);$("<img>").attr("src","src/assets/misc/"+t+".png").attr("alt",Utils.capitalize(t)).appendTo(e),$("<span>").text(Utils.capitalize(t)).appendTo(e)}}else s.text("Any "+a)}registerEvents(t){for(const e of t.children())$(e).on("click",()=>{this.toggleState($(e))})}markRows(){const t=State.getValue(this.namespace);for(const e in t)t[e]&&this.toggleRows(e)}completeInitialization(){const t=$("#tracker-cover").delay(1250).fadeOut(1e3,()=>t.remove());$("#loading-progress").delay(1e3).fadeOut(250,()=>$("#"+this.namespace).show())}toggleState(t){const e=$(t).attr("type");null!=e&&(this.toggleRows(e),State.setValue(this.namespace,e,$(t).hasClass("checked")))}toggleRows(t){const e=$("body").find("[type="+t+"]");for(const t of e)$(t).toggleClass("checked")}}class CropTracker extends Tracker{constructor(t){super("crops-tracker");for(const e of["spring","summer","fall"]){const a=Object.keys(t).filter(a=>{const s=t[a];return null!=s.seasons&&(s.seasons==e||s.seasons.includes(e))}),s=$("<div>").addClass("section").appendTo("#"+this.namespace+"-content"),r=$("<div>").addClass("graphic-header").appendTo(s);$("<h1>").text("any"==e?"Any season":Utils.capitalize(e)).appendTo(r),"any"!=e&&($("<img>").attr("src","src/assets/misc/"+e+".png").attr("alt",Utils.capitalize(e)).prependTo(r),$("<img>").attr("src","src/assets/misc/"+e+".png").attr("alt",Utils.capitalize(e)).appendTo(r));const n=$("<table>").attr("id",e+"-tracker").appendTo(s),o=$("<tr>").addClass("table-headers").appendTo(n);$("<th>").text("Name").appendTo(o),$("<th>").text("Seasons").appendTo(o),$("<th>").text("Growth").appendTo(o),$("<th>").text("Regrowth").appendTo(o),$("<th>").text("Polyculture").appendTo(o),$("<th>").text("Trellis").appendTo(o),$("<th>").text("Used In").appendTo(o);for(const e of a){const a=t[e],s=$("<tr>").attr("type",e).appendTo(n),r=$("<td>").appendTo(s),o=$("<div>").addClass("info-holder").appendTo(r);$("<img>").attr("src","src/assets/crops/"+e+".png").attr("alt",Utils.formatID(e)).appendTo(o),$("<span>").text(Utils.formatID(e)).appendTo(o),super.addGraphicInformation(s,a.seasons,"season"),this.addGrowthInformation(s,a["growth-timer"]),this.addRegrowthInformation(s,a.regrowth),this.addCheckedGraphic(s,a.polyculture,"polyculture","Not used in polyculture"),this.addCheckedGraphic(s,a.trellis,"trellis","Does not use a trellis"),super.addGraphic(s,a["used-in"])}super.registerEvents(n)}super.markRows(),super.completeInitialization()}addGrowthInformation(t,e){$("<td>").text(e+" day"+(e>1?"s":"")).appendTo(t)}addRegrowthInformation(t,e){null!=e?this.addGrowthInformation(t,e):$("<td>").text("N/A").appendTo(t)}addCheckedGraphic(t,e,a,s){e?super.addGraphic(t,e?a:null):super.addGraphic(t,"cross",s)}}class FishTracker extends Tracker{constructor(t){super("fish-tracker");for(const e of["any","spring","summer","fall","winter"]){const a=Object.keys(t).filter(a=>{const s=t[a];return"any"==e?null==s.seasons:null!=s.seasons&&(s.seasons==e||s.seasons.includes(e))}),s=$("#fish-tracker-content"),r=$("<div>").addClass("section").appendTo(s),n=$("<div>").addClass("graphic-header").appendTo(r);$("<h1>").text("any"==e?"Any Season":Utils.capitalize(e)).appendTo(n),"any"!=e&&($("<img>").attr("src","src/assets/misc/"+e+".png").attr("alt",Utils.capitalize(e)).prependTo(n),$("<img>").attr("src","src/assets/misc/"+e+".png").attr("alt",Utils.capitalize(e)).appendTo(n));const o=$("<table>").attr("id",e+"-tracker").appendTo(r),i=$("<tr>").addClass("table-headers").appendTo(o);$("<th>").text("Name").appendTo(i),$("<th>").text("Seasons").appendTo(i),$("<th>").text("Areas").appendTo(i),$("<th>").text("Times").appendTo(i),$("<th>").text("Weather").appendTo(i),$("<th>").text("Used In").appendTo(i);for(const e of a){const a=t[e],s=$("<tr>").attr("type",e).appendTo(o),r=$("<td>").appendTo(s),n=$("<div>").addClass("info-holder").appendTo(r);$("<img>").attr("src","src/assets/fish/"+e+".png").attr("alt",Utils.formatID(e)).appendTo(n),$("<span>").text(Utils.formatID(e)).appendTo(n),super.addGraphicInformation(s,a.seasons,"season"),this.addAreaInformation(s,a.areas),this.addTimeInformation(s,a.times),super.addGraphicInformation(s,a.weather,"weather"),super.addGraphic(s,a["used-in"])}super.registerEvents(o)}super.markRows(),super.completeInitialization()}addAreaInformation(t,e){const a=$("<td>").appendTo(t);if("string"==typeof e)a.text(this.formatAreaName(e));else for(const t of e)$("<div>").text(this.formatAreaName(t)).appendTo(a)}addTimeInformation(t,e){const a=$("<td>").appendTo(t);if(null!=e)if("string"==typeof e)a.text(e);else for(const t of e)$("<div>").text(t).appendTo(a);else a.text("Any time")}formatAreaName(t){let e=t;switch(t){case"rivers":e="rivers-(Town and Forest)";break;case"forest":e="forest-lake";break;case"bug-lair":e="mutant-bug-lair";break;case"swamp":e="witch's-swamp";break;case"sewers":e="the-sewers";break;case"mines":e="mines (20F)";break;case"ice-mines":e="mines (60F)";break;case"lava-mines":e="mines (100F)"}return Utils.formatID(e)}}